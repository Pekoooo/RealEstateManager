Index: app/src/main/java/com/example/masterdetailflowkotlintest/ui/addProperty/AddPropertyFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.masterdetailflowkotlintest.ui.addProperty\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.app.AlertDialog\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.os.Environment\r\nimport android.provider.MediaStore\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.SwitchCompat\r\nimport androidx.core.content.FileProvider\r\nimport androidx.core.view.MenuProvider\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.lifecycle.coroutineScope\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.navigation.fragment.navArgs\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions\r\nimport com.example.masterdetailflowkotlintest.R\r\nimport com.example.masterdetailflowkotlintest.databinding.FragmentAddPropertyBinding\r\nimport com.example.masterdetailflowkotlintest.model.Photo\r\nimport com.example.masterdetailflowkotlintest.model.Property\r\nimport com.example.masterdetailflowkotlintest.ui.main.MainActivity\r\nimport com.example.masterdetailflowkotlintest.utils.Constants.ARG_NO_ITEM_ID\r\nimport com.example.masterdetailflowkotlintest.utils.UriPathHelper\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.coroutines.launch\r\nimport pub.devrel.easypermissions.AppSettingsDialog\r\nimport pub.devrel.easypermissions.EasyPermissions\r\nimport pub.devrel.easypermissions.EasyPermissions.hasPermissions\r\nimport java.io.File\r\nimport java.io.IOException\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\n\r\n@AndroidEntryPoint\r\nclass AddPropertyFragment : Fragment(), EasyPermissions.PermissionCallbacks {\r\n\r\n    private val viewModel: AddPropertyViewModel by viewModels()\r\n    private val housingType: MutableList<String> = ArrayList()\r\n    private lateinit var currentPhotoPath: String\r\n    private var _binding: FragmentAddPropertyBinding? = null\r\n    private val binding: FragmentAddPropertyBinding get() = _binding!!\r\n    private var allPropertyPictures: MutableList<Photo> = mutableListOf()\r\n    private var currentProperty: Property? = null\r\n    private var uriImageSelected: Uri? = null\r\n    private val args: AddPropertyFragmentArgs by navArgs()\r\n    private val cameraPerms = arrayOf(\r\n        Manifest.permission.CAMERA,\r\n        Manifest.permission.WRITE_EXTERNAL_STORAGE\r\n    )\r\n\r\n    private val storagePerms = arrayOf(\r\n        Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n        Manifest.permission.READ_EXTERNAL_STORAGE\r\n    )\r\n\r\n    companion object {\r\n        const val TAG = \"MyAddPropertyFragment\"\r\n        private const val REQUEST_CODE_PERMISSIONS_CAMERA = 10\r\n        private const val REQUEST_CODE_PERMISSIONS_STORAGE = 20\r\n        private const val RC_CHOOSE_PHOTO = 30\r\n        private const val REQUEST_IMAGE_CAPTURE = 1\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = FragmentAddPropertyBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        (activity as MainActivity).supportActionBar?.show()\r\n\r\n        populateHousingTypeList()\r\n        setUpSpinner()\r\n        createToolbar()\r\n\r\n\r\n        if (areArgsForUpdate()) {\r\n            (activity as MainActivity).supportActionBar?.title = \"Update Property\"\r\n\r\n            retrieveData(args.navigationArgument)\r\n\r\n        } else {\r\n            (activity as MainActivity).supportActionBar?.title = \"New Property\"\r\n        }\r\n\r\n        binding.addPictureButton.setOnClickListener {\r\n\r\n            val builder = AlertDialog.Builder(context)\r\n                .create()\r\n\r\n            val customView = layoutInflater.inflate(R.layout.add_picture_dialog, null)\r\n            val cameraButton = customView.findViewById<Button>(R.id.button_take_picture)\r\n            val storageButton = customView.findViewById<Button>(R.id.button_open_internal_storage)\r\n\r\n            builder.setView(customView)\r\n\r\n            builder.show()\r\n\r\n            cameraButton.setOnClickListener {\r\n\r\n                if (hasPermissions(requireContext(), *cameraPerms)) {\r\n\r\n                    capturePhoto()\r\n\r\n                } else {\r\n\r\n                    requestCameraPermission()\r\n\r\n                }\r\n\r\n            }\r\n\r\n            storageButton.setOnClickListener {\r\n\r\n                if (hasPermissions(requireContext(), *storagePerms)) {\r\n\r\n                    val intent =\r\n                        Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)\r\n                    startActivityForResult(intent, RC_CHOOSE_PHOTO)\r\n\r\n                } else {\r\n                    requestStoragePermission()\r\n                }\r\n                builder.dismiss()\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    private fun capturePhoto() {\r\n        val cameraInt = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\r\n        val photoFile: File = createImageFile()\r\n        uriImageSelected = FileProvider.getUriForFile(\r\n            requireContext(),\r\n            \"com.example.masterdetailflowkotlintest.fileprovider\",\r\n            photoFile\r\n        )\r\n        cameraInt.putExtra(MediaStore.EXTRA_OUTPUT, uriImageSelected)\r\n        startActivityForResult(cameraInt, REQUEST_IMAGE_CAPTURE)\r\n\r\n    }\r\n\r\n\r\n    @SuppressLint(\"SimpleDateFormat\")\r\n    @Throws(IOException::class)\r\n    private fun createImageFile(): File {\r\n        // Create an image file name\r\n        val timeStamp: String = SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(Date())\r\n        val storageDir: File? = activity?.getExternalFilesDir(Environment.DIRECTORY_PICTURES)\r\n        return File.createTempFile(\r\n            \"JPEG_${timeStamp}_\", /* prefix */\r\n            \".jpg\", /* suffix */\r\n            storageDir /* directory */\r\n        ).apply {\r\n            // Save a file: path for use with CAMERA\r\n            currentPhotoPath = absolutePath\r\n        }\r\n    }\r\n\r\n\r\n    @Deprecated(\"Deprecated in Java\")\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        handleResponse(requestCode, resultCode, data)\r\n    }\r\n\r\n    private fun handleResponse(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        if (requestCode == REQUEST_IMAGE_CAPTURE) {\r\n            if (resultCode == AppCompatActivity.RESULT_OK) {\r\n\r\n                Log.d(TAG, \"handleResponse: $currentPhotoPath\")\r\n\r\n                val currentPhoto = Photo(\r\n                    currentPhotoPath,\r\n                    false\r\n                )\r\n                allPropertyPictures.add(currentPhoto)\r\n\r\n                setRecyclerView(binding.recyclerView)\r\n\r\n                openDialog(currentPhoto)\r\n\r\n            }\r\n        } else if (requestCode == RC_CHOOSE_PHOTO) {\r\n\r\n            uriImageSelected = data!!.data\r\n            val uriPathHelper = UriPathHelper()\r\n            val path = uriImageSelected?.let { uriPathHelper.getPath(requireContext(), it) }\r\n\r\n            Log.d(TAG, \"handleResponse: $path\")\r\n\r\n            val currentPhoto = Photo(\r\n                path!!,\r\n                false\r\n            )\r\n            allPropertyPictures.add(currentPhoto)\r\n\r\n            setRecyclerView(binding.recyclerView)\r\n\r\n            openDialog(currentPhoto)\r\n\r\n        }\r\n    }\r\n\r\n    private fun setRecyclerView(recyclerView: RecyclerView) {\r\n\r\n        val layoutManager = LinearLayoutManager(context)\r\n        layoutManager.orientation = LinearLayoutManager.HORIZONTAL\r\n        recyclerView.layoutManager = layoutManager\r\n\r\n        recyclerView.adapter = AddPropertyAdapter(allPropertyPictures) { photo, _ ->\r\n\r\n            openDialog(photo)\r\n\r\n        }\r\n    }\r\n\r\n    private fun openDialog(photo: Photo?) {\r\n\r\n        val builder = AlertDialog.Builder(context)\r\n            .create()\r\n        val inflater = layoutInflater\r\n        val dialogLayout: View = inflater.inflate(R.layout.info_picture_dialog, null)\r\n\r\n        Glide\r\n            .with(requireContext())\r\n            .load(photo?.path)\r\n            .override(1200, 1200)\r\n            .centerCrop()\r\n            .transition(DrawableTransitionOptions.withCrossFade())\r\n            .into(dialogLayout.findViewById(R.id.image_view_custom_dialog_edit_picture))\r\n\r\n        val saveButton = dialogLayout.findViewById<Button>(R.id.save_button)\r\n        val deleteButton = dialogLayout.findViewById<Button>(R.id.delete_button)\r\n        val descriptionTextView =\r\n            dialogLayout.findViewById<EditText>(R.id.description_picture_edit_text)\r\n        val switch = dialogLayout.findViewById<SwitchCompat>(R.id.make_main_picture_switch)\r\n\r\n        builder.setView(dialogLayout)\r\n        builder.show()\r\n\r\n        if (currentProperty?.mainPicture == photo?.path) switch.toggle()\r\n\r\n\r\n        if (photo?.description != null) (descriptionTextView as TextView).text = photo.description.toString()\r\n\r\n\r\n        saveButton.setOnClickListener {\r\n            if(currentProperty == null) currentProperty = getPropertyInfo()\r\n\r\n            if (switch.isChecked) changeMainPhoto(photo)\r\n\r\n            photo?.description = descriptionTextView.text.toString()\r\n            updateDescription(photo)\r\n            setRecyclerView(binding.recyclerView)\r\n            builder.dismiss()\r\n        }\r\n\r\n        deleteButton.setOnClickListener {\r\n\r\n            currentProperty?.pictureList?.remove(photo)\r\n            setRecyclerView(binding.recyclerView)\r\n            builder.dismiss()\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private fun changeMainPhoto(currentPhoto: Photo?) {\r\n        currentProperty?.mainPicture = currentPhoto?.path.toString()\r\n    }\r\n\r\n    private fun updateDescription(currentPhoto: Photo?) {\r\n        currentProperty?.pictureList!!.filter { it.path == currentPhoto?.path }.forEach {\r\n            it.description = currentPhoto?.description\r\n        }\r\n    }\r\n\r\n    private fun areArgsForUpdate(): Boolean =\r\n        args.navigationArgument != ARG_NO_ITEM_ID\r\n\r\n    private fun retrieveData(id: Int) {\r\n        lifecycle.coroutineScope.launch {\r\n            viewModel.getPropertyById(id).collect {\r\n                displayData(it)\r\n                currentProperty = it\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun displayData(property: Property) {\r\n\r\n        (binding.spinnerEditText as TextView).text = property.type // does not work\r\n        (binding.agentNameEditText as TextView).text = property.agent\r\n        (binding.propertyDescriptionEditText as TextView).text = property.description\r\n        (binding.surfaceEditText as TextView).text = property.surface\r\n        (binding.addressEditText as TextView).text = property.address\r\n        (binding.roomsEditText as TextView).text = property.rooms\r\n        (binding.cityEditText as TextView).text = property.city\r\n        (binding.bedroomEditText as TextView).text = property.bedrooms\r\n        (binding.postalCodeEditText as TextView).text = property.postalCode\r\n        (binding.bathroomEditText as TextView).text = property.bathrooms\r\n        (binding.countryEditText as TextView).text = property.country\r\n        (binding.neighborhoodEditText as TextView).text = property.neighborhood\r\n        (binding.priceEditText as TextView).text = property.price\r\n        allPropertyPictures = property.pictureList\r\n\r\n        setRecyclerView(binding.recyclerView)\r\n\r\n        displayPoi(property)\r\n\r\n    }\r\n\r\n    private fun displayPoi(property: Property) {\r\n\r\n        if(property.poiList.contains(resources.getString(R.string.school))){\r\n            binding.checkbox?.checkboxNearbySchool?.isChecked = true\r\n        }\r\n\r\n        if(property.poiList.contains(resources.getString(R.string.playground))){\r\n            binding.checkbox?.checkboxNearbyPlayground?.isChecked = true\r\n        }\r\n\r\n        if(property.poiList.contains(resources.getString(R.string.shops))){\r\n            binding.checkbox?.checkboxNearbyShop?.isChecked = true\r\n        }\r\n\r\n        if(property.poiList.contains(resources.getString(R.string.train))){\r\n            binding.checkbox?.checkboxNearbyTrain?.isChecked = true\r\n        }\r\n\r\n        if(property.poiList.contains(resources.getString(R.string.daycare))){\r\n            binding.checkbox?.checkboxNearbyDaycare?.isChecked = true\r\n        }\r\n\r\n        if(property.poiList.contains(resources.getString(R.string.parking))){\r\n            binding.checkbox?.checkboxNearbyParking?.isChecked = true\r\n        }\r\n\r\n    }\r\n\r\n    private fun createToolbar() {\r\n        requireActivity().addMenuProvider(object : MenuProvider {\r\n            override fun onCreateMenu(menu: Menu, menuInflater: MenuInflater) {\r\n                menu.clear()\r\n                menuInflater.inflate(R.menu.menu_add_activity, menu)\r\n            }\r\n\r\n            override fun onMenuItemSelected(menuItem: MenuItem): Boolean = when (menuItem.itemId) {\r\n\r\n                R.id.save -> {\r\n                    if (allFieldsAreFilled()) {\r\n\r\n                        if (areArgsForUpdate()) {\r\n\r\n                            Toast.makeText(context, \"Property Updated\", Toast.LENGTH_LONG).show()\r\n                            viewModel.updateProperty(getPropertyInfo().copy(id = args.navigationArgument))\r\n                            findNavController().navigateUp()\r\n\r\n                        } else {\r\n                            Toast.makeText(context, \"New property saved\", Toast.LENGTH_LONG).show()\r\n                            viewModel.createProperty(getPropertyInfo())\r\n                            findNavController().navigateUp()\r\n                        }\r\n\r\n                    } else {\r\n                        Toast.makeText(\r\n                            context,\r\n                            \"Make sure all fields are filled\",\r\n                            Toast.LENGTH_SHORT\r\n                        ).show()\r\n                    }\r\n\r\n                    true\r\n                }\r\n                else -> false\r\n            }\r\n        }, viewLifecycleOwner)\r\n    }\r\n\r\n    private fun allFieldsAreFilled(): Boolean =\r\n        binding.agentNameEditText.text.toString() != \"\" &&\r\n                binding.propertyDescriptionEditText.text.toString() != \"\" &&\r\n                binding.surfaceEditText.text.toString() != \"\" &&\r\n                binding.addressEditText.text.toString() != \"\" &&\r\n                binding.roomsEditText.text.toString() != \"\" &&\r\n                binding.cityEditText.text.toString() != \"\" &&\r\n                binding.bedroomEditText.text.toString() != \"\" &&\r\n                binding.postalCodeEditText.text.toString() != \"\" &&\r\n                binding.bathroomEditText.text.toString() != \"\" &&\r\n                binding.countryEditText.text.toString() != \"\" &&\r\n                binding.neighborhoodEditText.text.toString() != \"\" &&\r\n                binding.priceEditText.text.toString() != \"\" &&\r\n                currentProperty?.mainPicture != \"\" &&\r\n                currentProperty?.pictureList?.size != 0\r\n\r\n    private fun getPropertyInfo() = Property(\r\n        0,\r\n        binding.surfaceEditText.text.toString(),\r\n        binding.spinner.selectedItem.toString(),\r\n        binding.addressEditText.text.toString(),\r\n        binding.cityEditText.text.toString(),\r\n        binding.neighborhoodEditText.text.toString(),\r\n        binding.postalCodeEditText.text.toString(),\r\n        binding.countryEditText.text.toString(),\r\n        binding.priceEditText.text.toString(),\r\n        binding.bathroomEditText.text.toString(),\r\n        binding.bedroomEditText.text.toString(),\r\n        Calendar.getInstance().time.toString(),\r\n        binding.roomsEditText.text.toString(),\r\n        binding.propertyDescriptionEditText.text.toString(),\r\n        binding.agentNameEditText.text.toString(),\r\n        currentProperty?.mainPicture.toString(),\r\n        allPropertyPictures,\r\n        getPoi(),\r\n    )\r\n\r\n    private fun getPoi(): MutableList<String> {\r\n        \r\n        val poiList = mutableListOf<String>()\r\n        \r\n        if(binding.checkbox?.checkboxNearbySchool?.isChecked == true){\r\n            poiList.add(resources.getString(R.string.school))\r\n        }\r\n        \r\n        if(binding.checkbox?.checkboxNearbyPlayground?.isChecked == true){\r\n            poiList.add(resources.getString(R.string.playground))\r\n        }\r\n        \r\n        if(binding.checkbox?.checkboxNearbyShop?.isChecked == true){\r\n            poiList.add(resources.getString(R.string.shop))\r\n        }\r\n        \r\n        if(binding.checkbox?.checkboxNearbyTrain?.isChecked == true){\r\n            poiList.add(resources.getString(R.string.train))\r\n        }\r\n\r\n        if(binding.checkbox?.checkboxNearbyDaycare?.isChecked == true){\r\n            poiList.add(resources.getString(R.string.daycare))\r\n        }\r\n\r\n        if(binding.checkbox?.checkboxNearbyParking?.isChecked == true){\r\n            poiList.add(resources.getString(R.string.parking))\r\n        }\r\n\r\n        return poiList\r\n\r\n    }\r\n\r\n    private fun populateHousingTypeList() {\r\n        housingType.add(\"House\")\r\n        housingType.add(\"Penthouse\")\r\n        housingType.add(\"Flat\")\r\n        housingType.add(\"Mansion\")\r\n    }\r\n\r\n    private fun setUpSpinner() {\r\n        val spinner = binding.spinner\r\n        val adapter = ArrayAdapter(\r\n            requireContext(),\r\n            android.R.layout.simple_spinner_dropdown_item,\r\n            housingType\r\n        )\r\n\r\n        spinner.adapter = adapter\r\n\r\n        binding.spinnerEditText.setOnClickListener {\r\n            binding.spinner.performClick()\r\n        }\r\n\r\n        binding.spinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\r\n            override fun onItemSelected(p0: AdapterView<*>?, p1: View?, p2: Int, p3: Long) {\r\n                (binding.spinnerEditText as TextView).text = binding.spinner.selectedItem.toString()\r\n            }\r\n\r\n            override fun onNothingSelected(p0: AdapterView<*>?) {\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onPermissionsGranted(requestCode: Int, perms: MutableList<String>) {\r\n        //TODO : Not working\r\n        if (requestCode == REQUEST_CODE_PERMISSIONS_CAMERA) {\r\n\r\n            //findNavController().navigate(R.id.cameraSurfaceProviderFragment)\r\n\r\n        } else {\r\n            TODO(\"Open storage\")\r\n\r\n        }\r\n    }\r\n\r\n    private fun requestCameraPermission() {\r\n        EasyPermissions.requestPermissions(\r\n            this,\r\n            getString(R.string.rationale_camera_and_storage),\r\n            REQUEST_CODE_PERMISSIONS_CAMERA,\r\n            *cameraPerms\r\n        )\r\n    }\r\n\r\n    private fun requestStoragePermission() {\r\n        EasyPermissions.requestPermissions(\r\n            this,\r\n            getString(R.string.rationale_camera_and_storage),\r\n            REQUEST_CODE_PERMISSIONS_STORAGE,\r\n            *storagePerms\r\n        )\r\n    }\r\n\r\n    override fun onPermissionsDenied(requestCode: Int, perms: MutableList<String>) {\r\n        if (EasyPermissions.somePermissionPermanentlyDenied(this, perms)) {\r\n            AppSettingsDialog.Builder(this).build().show()\r\n        } else {\r\n            if (perms[0] == Manifest.permission.CAMERA) {\r\n                requestCameraPermission()\r\n            } else {\r\n                requestStoragePermission()\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/com/example/masterdetailflowkotlintest/ui/addProperty/AddPropertyFragment.kt b/app/src/main/java/com/example/masterdetailflowkotlintest/ui/addProperty/AddPropertyFragment.kt
--- a/app/src/main/java/com/example/masterdetailflowkotlintest/ui/addProperty/AddPropertyFragment.kt	
+++ b/app/src/main/java/com/example/masterdetailflowkotlintest/ui/addProperty/AddPropertyFragment.kt	
@@ -371,16 +371,22 @@
                 R.id.save -> {
                     if (allFieldsAreFilled()) {
 
-                        if (areArgsForUpdate()) {
+                        when(areArgsForUpdate()){
 
-                            Toast.makeText(context, "Property Updated", Toast.LENGTH_LONG).show()
-                            viewModel.updateProperty(getPropertyInfo().copy(id = args.navigationArgument))
-                            findNavController().navigateUp()
+                            true -> {
+                                Toast.makeText(context, "Property Updated", Toast.LENGTH_LONG).show()
+                                viewModel.updateProperty(getPropertyInfo().copy(id = args.navigationArgument))
+                                findNavController().navigateUp()
+                            }
 
-                        } else {
-                            Toast.makeText(context, "New property saved", Toast.LENGTH_LONG).show()
-                            viewModel.createProperty(getPropertyInfo())
-                            findNavController().navigateUp()
+                            false -> {
+                                Toast.makeText(context, "New property saved", Toast.LENGTH_LONG).show()
+                                viewModel.createProperty(getPropertyInfo())
+                                findNavController().navigateUp()
+
+                            }
+
+
                         }
 
                     } else {
